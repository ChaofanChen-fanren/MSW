##########################################################################################
#                                 Dataset object list
##########################################################################################
# mvtec dataset object list
mvtec_obj_list = [
    "bottle",
    "cable",
    "capsule",
    "carpet",
    "grid",
    "hazelnut",
    "leather",
    "metal nut",
    "pill",
    "screw",
    "tile",
    "toothbrush",
    "transistor",
    "wood",
    "zipper",
]
# visa dataset object list
visa_obj_list = [
    "candle",
    "cashew",
    "chewinggum",
    "fryum",
    "pipe fryum",
    "macaroni1",
    "macaroni2",
    "pcb1",
    "pcb2",
    "pcb3",
    "pcb4",
    "capsules",
]


object_list = {
    'visa': visa_obj_list,
    'mvtec': mvtec_obj_list,

}

##########################################################################################
#                             Anomaly details generated by gpt
##########################################################################################
# mvtec dataset anomaly details generated by gpt
mvtec_anomaly_detail_gpt = {
    "carpet": "discoloration in a specific area,irregular patch or section with a different texture,frayed edges or unraveling fibers,burn mark or scorching",
    "grid": "crooked,cracks,excessive gaps,discoloration,deformation,missing,inconsistent spacing between grid elements,corrosion,visible signs,chipping",
    "leather": "scratches,discoloration,creases,uneven texture,tears,brittleness,damage,seams,heat damage,mold",
    "tile": "chipped,irregularities,discoloration,efflorescence,warping,missing,depressions,lippage,fungus,damage",
    "wood": "knots,warping,cracks along the grain,mold growth on the surface,staining from water damage,wood rot,woodworm holes,rough patches,protruding knots",
    "bottle": "cracked large,cracked small,dented large,dented small,leaking,discolored,deformed,missing cap,excessive condensation,unusual odor",
    "cable": "twisted,knotted cable strands,detached connectors,excessive stretching,dents,corrosion,scorching along the cable,exposed conductive material",
    "capsule": "irregular shape,discoloration coloring,crinkled,uneven seam,condensation inside the capsule,foreign particles,unusually soft or hard",
    "hazelnut": "fungal growth,Unusual discoloration,rotten or foul odor emanating,insect infestation,wetness,misshapen shell,unusually thin,contaminants,unusual texture",
    "metal nut": "cracks,irregular threading,corrosion,missing,distortion,signs of discoloration,excessive wear on contact surfaces,inconsistent texture",
    "pill": "irregular shape,crumbling texture,excessive powder,Uneven coating,presence of air bubbles,disintegration,abnormal specks",
    "screw": "rust on the surface,bent,damaged threads,stripped threads,deformed top,coating damage,uneven grooves,inconsistent size",
    "toothbrush": "loose bristles,uneven bristle distribution,excessive shedding of bristles,staining on the bristles,abrasive texture,irregularities in the shape",
    "transistor": "burn marks,detached leads,signs of corrosion,irregularities in the shape,presence of cracks or fractures,signs of physical trauma,irregularities in the surface texture",
    "zipper": "bent,frayed,misaligned,excessive stiffness,corroded,detaches,loose,warped",
}
# visa dataset anomaly details generated by gpt
visa_anomaly_detail_gpt = {
    "candle": "cracks or fissures in the wax,Wax pooling unevenly around the wick,tunneling,incomplete wax melt pool,irregular or flickering flame,other,extra wax in candle,wax melded out of the candle",
    "capsules": "uneven capsule size,capsule shell appears brittle,excessively soft,dents,condensation,irregular seams or joints,specks",
    "cashew": "uneven coloring,fungal growth,presence of foreign objects,unusual texture,empty shells,signs of moisture,stuck together",
    "chewinggum": "consistency,presence of foreign objects,uneven coloring,excessive hardness,similar colour spot",
    "fryum": "irregular shape,unusual odor,uneven coloring,unusual texture,small scratches,different colour spot,fryum stuck together,other",
    "macaroni1": "uneven shape ,small scratches,small cracks,uneven coloring,signs of insect infestation,uneven texture,Unusual consistency",
    "macaroni2": "irregular shape,small scratches,presence of foreign particles,excessive moisture,Signs of infestation,small cracks,unusual texture",
    "pcb1": "oxidation on the copper traces,separation of layers,presence of solder bridges,excessive solder residue,discoloration,Uneven solder joints,bowing of the board,missing vias",
    "pcb2": "oxidation on the copper traces,separation of layers,presence of solder bridges,excessive solder residue,discoloration,Uneven solder joints,bowing of the board,missing vias",
    "pcb3": "oxidation on the copper traces,separation of layers,presence of solder bridges,excessive solder residue,discoloration,Uneven solder joints,bowing of the board,missing vias",
    "pcb4": "oxidation on the copper traces,separation of layers,presence of solder bridges,excessive solder residue,discoloration,Uneven solder joints,bowing of the board,missing vias",
    "pipe fryum": "uneven shape,presence of foreign objects,different colour spot,unusual odor,empty interior,unusual texture,similar colour spot,stuck together",
}
anomaly_detail_gpt = {
    'visa': visa_anomaly_detail_gpt,
    'mvtec': mvtec_anomaly_detail_gpt,
}

##########################################################################################
#                             Anomaly Position prompt
##########################################################################################
positions_list = [
    "top left",
    "top",
    "top right",
    "left",
    "center",
    "right",
    "bottom left",
    "bottom",
    "bottom right",
]

location_map = {"top left": [(0, 0), (172, 172)],
                "top": [(173, 0), (344, 172)],
                "top right": [(345, 0), (517, 172)],
                "left": [(0, 173), (172, 344)],
                "center": [(173, 173), (344, 344)],
                "right": [(345, 173), (517, 344)],
                "bottom left": [(0, 345), (172, 517)],
                "bottom": [(173, 345), (344, 517)],
                "bottom right": [(345, 345), (517, 517)]}

##########################################################################################
#                                normal or abnormal status
##########################################################################################
# normal status
status_normal = [
    "{}",
    "flawless {}",
    "perfect {}",
    "unblemished {}",
    "{} without flaw",
    "{} without defect",
    "{} without damage",
]
# abnormal status
status_abnormal_winclip = [
    "damaged {}",
    "broken {}",
    "{} with flaw",
    "{} with defect",
    "{} with damage",
]

import re


class PromptTemplate:
    def __init__(self,
                 dataset: str = 'visa',
                 abnormal: bool = False,
                 position: bool = False
                 ):
        self.oringal_class_names = object_list[dataset]
        self.is_abnormal = abnormal
        self.is_position = position

        self.cls_map = {cls_name: re.sub(r'\d+', '', cls_name) for cls_name in visa_obj_list}
        self.anomaly_detail_gpt = anomaly_detail_gpt[dataset]
        self.status = {}
        if abnormal:
            for class_name in visa_anomaly_detail_gpt.keys():
                self.status[class_name] = ['abnormal {} ' + 'with {}'.format(x) for x in
                                           visa_anomaly_detail_gpt[class_name].split(',')] + status_abnormal_winclip
        else:
            self.status = status_normal
        self.positions = positions_list
        self.prompt_template = self.gen_prompt()

    def gen_prompt(self):
        prompt_template = {}
        for class_name in self.oringal_class_names:
            cls_name = self.cls_map[class_name]  # pcb1 -> pcb
            if self.is_abnormal:
                # [w_1][w_2]...[w_{n_ctx}][STATE][CLASS] with [ANOMALY CLASS]
                p = [
                    status_i.format(class_name)
                    for status_i in self.status[class_name]
                ]
            else:
                # [v_1][v_2]...[v_{n_ctx}][STATE][CLASS]
                p = [status_i.format(cls_name) + "." for status_i in self.status]
            if self.is_position:
                p = [
                    p_i + " at " + position + "."
                    for p_i in p
                    for position in self.positions
                ]
            prompt_template[cls_name] = p

        return prompt_template

    def get_prompt(self):
        return self.prompt_template
